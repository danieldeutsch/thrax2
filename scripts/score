#!/usr/bin/perl -w
use strict;

my %word_count;
my %source_word_count;
my %target_word_count;
my %rule_count;
my %source_count;
my %target_count;

while (<>) {
  chomp;
  my ($lhs,$src,$tgt,$alignment,undef) = split /\t/, $_, 5;
  $rule_count{$_}++;
  $source_count{$src}++;
  $target_count{$tgt}++;

  my @ss = terminals($src);
  my @ts = terminals($tgt);
  foreach (word_pairs(\@ss, \@ts, $alignment)) {
    my ($s, $t) = split /\t/;
    $word_count{$_}++;
    $source_word_count{$s}++;
    $target_word_count{$t}++;
  }
  foreach (word_pairs(\@ts, \@ss, flip($alignment))) {
    my ($t, $s) = split /\t/;
    $word_count{"$s\t$t"}++;
    $source_word_count{$s}++;
    $target_word_count{$t}++;
  }
}

sub terminals {
  my $rhs = shift;
  grep { !/,\d+\]$/ } split " ", $rhs;
}

sub flip {
  my $a = shift;
  $a =~ s/(\d+)-(\d+)/$2-$1/g;
}

sub word_pairs {
  my ($from, $to, $alignment) = @_;
  my @fs = @$from;
  my @ts = @$to;
  my %seen;
  my @result;
  while ($alignment =~ /(\d+)-(\d+)/g) {
    push @result, "$fs[$1]\t$ts[$2]";
    $seen{"$1-"} = undef;
    $seen{"-$2"} = undef;
  }
  for (my $i = 0; $i < @fs; $i++) {
    push @result, "$fs[$i]\t" unless exists $seen{"$i-"};
  }
  for (my $i = 0; $i < @ts; $i++) {
    push @result, "\t$ts[$i]" unless exists $seen{"-$i"};
  }
  return @result;
}

sub word_lexprobs {
  my ($s, $t) = @_;
  my $joint = $word_count{"$s\t$t"};
  my $sc = $source_word_count{$s};
  my $tc = $target_word_count{$t};
  return ( $joint / $tc, $joint / $sc);
}

sub lexprob {
  my ($src, $tgt, $alignment) = @_;
  my @ss = terminals $src;
  my @ts = terminals $tgt;
  my %terms;
  while ($alignment =~ /(\d+)-(\d+)/g) {
    my ($ps, $pt) = word_lexprobs($ss[$1], $ts[$2]);
    $terms{"$1-"} += $pt;
    $terms{"-$2"} += $pt;
    $terms{"count$1-"}++;
    $terms{"count-$2"}++;
  }
  my $s = 1;
  my $t = 1;
  foreach (keys %terms) {
    next if /^c/;  # count
    my $avg = $terms{$_} / $terms{"count$_"};
    if (/-$/) {
      $s *= $avg;
    } else {
      $t *= $avg;
    }
  }
  return (log($s), log($t));
}

foreach (keys %rule_count) {
  next unless $rule_count{$_} > 1;
  print "$_\t$rule_count{$_}\t";
  my (undef,$src,$tgt,$alignment,undef) = split /\t/, $_, 5;
  my $t_given_s = log($rule_count{$_} / $source_count{$src});
  my $s_given_t = log($rule_count{$_} / $target_count{$tgt});
  print "p(e|f)=$t_given_s p(f|e)=$s_given_t";
  ($s_given_t, $t_given_s) = lexprob($src, $tgt, $alignment);
  print " lex(e|f)=$t_given_s lex(f|e)=$s_given_t";
  print "\n";
}
