#!/usr/bin/perl -w
use strict;

my %word_count;
my %source_word_count;
my %target_word_count;
my %rule_count;
my %source_count;
my %target_count;

my $word_file = shift;
open my $words, "<$word_file" or die "$!";
while (<$words>) {
  chomp;
  my ($s,$t,$c) = split /\t/;
  $word_count{"$s\t$t"} += $c;
  $source_word_count{$s} += $c;
  $target_word_count{$t} += $c;
}
close $words;

while (<>) {
  chomp;
  my ($lhs,$src,$tgt,undef) = split /\t/, $_, 4;
  $rule_count{$_}++;
  $source_count{$src}++;
  $target_count{$tgt}++;
}

sub lexprob {
  my ($s, $t, $source_given_target) = @_;
  my $count = $word_count{"$s\t$t"};
  my $marginal =
      $source_given_target ? $target_word_count{$t} : $source_word_count{$s};
  return 1 unless (defined $count and defined $marginal);
  $count / $marginal;
}

sub lexprob_source_given_target {
  my ($stok, $ttok, $alignment) = @_;
  my $p = 1;
  my @as = split " ", $alignment;
  for (my $i = 0; $i < @$stok; $i++) {
    my @ts = grep /^$i-/, @as;
    next unless @ts;
    map s/\d+-//, @ts;
    my $term = 0;
    $term += lexprob($$stok[$i], $$ttok[$_], 1) foreach (@ts);
    $p *= $term;
  }
  log($p);
}

sub terminals {
  grep { !/^\[/ } split " ", $_[0];
}

foreach (keys %rule_count) {
  print "$_\t";
  my (undef,$src,$tgt,$alignment,undef) = split /\t/, $_, 5;
  my $t_given_s = log($rule_count{$_} / $source_count{$src});
  my $s_given_t = log($rule_count{$_} / $target_count{$tgt});
  print "p(e|f)=$t_given_s p(f|e)=$s_given_t";
  my $s_given_t_lex = lexprob_source_given_target(
      [terminals $src], [terminals $tgt], $alignment);
  print " p_lex(f|e)=$s_given_t_lex";
  print "\n";
}
